Exercise 1.3: Functions and Other Operations in Python
Learning Goals

●	Implement conditional statements in Python to determine program flow
●	Use loops to reduce time and effort in Python programming
●	Write functions to organize Python code

Reflection Questions

1.	In this Exercise, you learned how to use if-elif-else statements to run different tasks based on conditions that you define. Now practice that skill by writing a script for a simple travel app using an if-elif-else statement for the following situation: 

●	The script should ask the user where they want to travel. 
●	The user’s input should be checked for 3 different travel destinations that you define. 
●	If the user’s input is one of those 3 destinations, the following statement should be printed: “Enjoy your stay in ______!”
●	If the user’s input is something other than the defined destinations, the following statement should be printed: “Oops, that destination is not currently available.”
	
Write your script here. (Hint: remember what you learned about indents!)

destination = input("Where would you like to travel? ").strip().lower()

if destination == "paris":
    print("Enjoy your stay in Paris!")
elif destination == "tokyo":
    print("Enjoy your stay in Tokyo!")
elif destination == "new york":
    print("Enjoy your stay in New York!")
else:
    print("Oops, that destination is not currently available.")

2.	Imagine you’re at a job interview for a Python developer role. The interviewer says “Explain logical operators in Python”. Draft how you would respond.

Logical operators in Python allow you to combine multiple conditions or expressions to make more complex decisions. There are three main logical operators: and, or, and not.

- and ensures that both conditions are true for the entire expression to be true.
- or ensures that at least one of the conditions is true for the expression to be true.
- not negates or reverses the truth value of a condition.

3.	What are functions in Python? When and why are they useful?

Functions in Python are blocks of reusable code that perform specific tasks. You define a function using the def keyword, give it a name, and include optional parameters. Functions are useful because they allow you to avoid repeating code, make programs more organized, and make debugging easier.

4.	In the section for Exercise 1 in this Learning Journal, you were asked in question 3 to set some goals for yourself while you complete this course.  In preparation for your next mentor call, make some notes on how you’ve progressed towards your goals so far.

I have deepened my understanding of Python’s core concepts and fundamentals but I think I need more practice in order to feel more comfortable.