Exercise 1.7: Finalizing Your Python Program
Learning Goals

●	Interact with a database using an object-relational mapper
●	Build your final command-line Recipe application


Reflection Questions

1.	What is an Object Relational Mapper and what are the advantages of using one?

An Object Relational Mapper (ORM) is a tool that helps you work with databases in an easier way. Instead of writing long and complex SQL commands, you can interact with the database using Python objects and methods. This makes your code cleaner and easier to understand. The main advantage of using an ORM is that it simplifies database operations. For example, you can create, read, update, or delete records without writing raw SQL code. It also makes your application more portable because you can switch between different databases without changing much of your code.

2.	By this point, you’ve finished creating your Recipe app. How did it go? What’s something in the app that you did well with? If you were to start over, what’s something about your app that you would change or improve?

Finishing the Recipe app felt like a big accomplishment! One thing that I think went really well was organizing the database and writing the functions to create, edit, and delete recipes. It was satisfying to see how the app came together piece by piece. If I were to start over, I’d focus on improving user input validation to handle edge cases more smoothly. For example, adding better error messages for invalid inputs would make the app more user-friendly.

3.	Imagine you’re at a job interview. You’re asked what experience you have creating an app using Python. Taking your work for this Achievement as an example, draft how you would respond to this question.

In a job interview, I would say: "I recently built a Recipe app using Python and SQLAlchemy, which is an Object Relational Mapper. In this project, I set up a database to store recipes, designed models to structure the data, and wrote functions to add, edit, search, and delete recipes. I also created a menu-driven interface so users could interact with the app easily. This experience taught me a lot about working with databases, handling user input, and writing reusable Python code."

4.	You’ve finished Achievement 1! Before moving on to Achievement 2, take a moment to reflect on your learning in the course so far: 
a.	What went well during this Achievement? 
b.	What’s something you’re proud of? 
c.	What was the most challenging aspect of this Achievement? 
d.	Did this Achievement meet your expectations? Did it give you the confidence to start working with your new Python skills?
e.	What’s something you want to keep in mind to help you do your best in Achievement 2?

Reflecting on Achievement 1, I think it went pretty well overall. I’m proud of how I was able to structure the app and get the different parts—like the database and user interface—to work together. The most challenging part was debugging issues when things didn’t work as expected, especially when working with the database. This Achievement met my expectations and gave me a lot of confidence in using Python to build practical applications. For Achievement 2, I want to remember to take my time breaking down complex problems into smaller steps. That approach really helped me during this project.
